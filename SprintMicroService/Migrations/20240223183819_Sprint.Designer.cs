// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SprintMicroService.Entities;

#nullable disable

namespace SprintMicroService.Migrations
{
    [DbContext(typeof(SprintContext))]
    [Migration("20240223183819_Sprint")]
    partial class Sprint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SprintMicroService.Entites.Phase", b =>
                {
                    b.Property<Guid>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PhaseDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("PhaseEndDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PhaseGoalsAchieved")
                        .HasColumnType("boolean");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhaseNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("PhaseStartDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SprintId")
                        .HasColumnType("uuid");

                    b.HasKey("PhaseId");

                    b.HasIndex("SprintId");

                    b.ToTable("Phases");

                    b.HasData(
                        new
                        {
                            PhaseId = new Guid("a45e2e02-38f6-4a56-94f5-74a1cf751087"),
                            PhaseDescription = "Planning phase for project X",
                            PhaseEndDate = new DateTimeOffset(new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            PhaseGoalsAchieved = false,
                            PhaseName = "Planning",
                            PhaseNotes = "Notes for the planning phase",
                            PhaseStartDate = new DateTimeOffset(new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SprintId = new Guid("f47c88b9-70e4-4b1b-bb70-1f02c2f5a5e1")
                        },
                        new
                        {
                            PhaseId = new Guid("4b3f8c15-2ee8-46c9-8e25-29d7a3977f92"),
                            PhaseDescription = "Execution phase for project XYZ",
                            PhaseEndDate = new DateTimeOffset(new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            PhaseGoalsAchieved = true,
                            PhaseName = "Execution",
                            PhaseNotes = "Notes for the execution phase",
                            PhaseStartDate = new DateTimeOffset(new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SprintId = new Guid("f47c88b9-70e4-4b1b-bb70-1f02c2f5a5e1")
                        });
                });

            modelBuilder.Entity("SprintMicroService.Entites.Sprint", b =>
                {
                    b.Property<Guid>("SprintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("GoalsAchieved")
                        .HasColumnType("boolean");

                    b.Property<string>("SprintDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("SprintEndDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SprintGoals")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SprintName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SprintNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("SprintStartDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuggestionsForNextSprint")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("SprintId");

                    b.ToTable("Sprints");

                    b.HasData(
                        new
                        {
                            SprintId = new Guid("6a411c13-a195-48f7-8dbd-67596c3974c0"),
                            GoalsAchieved = true,
                            SprintDescription = "Opis prvog sprinta",
                            SprintEndDate = new DateTimeOffset(new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SprintGoals = "Ciljevi prvog sprinta",
                            SprintName = "Sprint 1",
                            SprintNotes = "Napomene o prvom sprintu",
                            SprintStartDate = new DateTimeOffset(new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SuggestionsForNextSprint = "Sugestije za prvi sprint"
                        },
                        new
                        {
                            SprintId = new Guid("f47c88b9-70e4-4b1b-bb70-1f02c2f5a5e1"),
                            GoalsAchieved = true,
                            SprintDescription = "Opis drugog sprinta",
                            SprintEndDate = new DateTimeOffset(new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SprintGoals = "Ciljevi drugog sprinta",
                            SprintName = "Sprint 2",
                            SprintNotes = "Napomene o drugom sprintu",
                            SprintStartDate = new DateTimeOffset(new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            SuggestionsForNextSprint = "Sugestije za drugi sprint"
                        });
                });

            modelBuilder.Entity("SprintMicroService.Entites.Phase", b =>
                {
                    b.HasOne("SprintMicroService.Entites.Sprint", "Sprint")
                        .WithMany("Phases")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("SprintMicroService.Entites.Sprint", b =>
                {
                    b.Navigation("Phases");
                });
#pragma warning restore 612, 618
        }
    }
}
